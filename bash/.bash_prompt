# Shamelessly copied from https://github.com/gf3/dotfiles
# Screenshot: http://i.imgur.com/s0Blh.png

# if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
#   export TERM=gnome-256color
# elif infocmp xterm-256color >/dev/null 2>&1; then
#   export TERM=xterm-256color
# fi

# if tput setaf 1 &> /dev/null; then
#   tput sgr0
#   if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
#     CYAN=$(tput setaf 6)
#     MAGENTA=$(tput setaf 9)
#     ORANGE=$(tput setaf 172)
#     GREEN=$(tput setaf 190)
#     PURPLE=$(tput setaf 141)
#     WHITE=$(tput setaf 0)
#   else
#     CYAN=$(tput setaf 6)
#     MAGENTA=$(tput setaf 5)
#     ORANGE=$(tput setaf 4)
#     GREEN=$(tput setaf 2)
#     PURPLE=$(tput setaf 1)
#     WHITE=$(tput setaf 7)
#   fi
#   BOLD=$(tput bold)
#   RESET=$(tput sgr0)
# else
#   CYAN="\033[0;36m"
#   MAGENTA="\033[1;31m"
#   ORANGE="\033[1;33m"
#   GREEN="\033[1;32m"
#   PURPLE="\033[1;35m"
#   WHITE="\033[1;37m"
#   BOLD=""
#   RESET="\033[m"
# fi

# export MAGENTA
# export ORANGE
# export GREEN
# export PURPLE
# export WHITE
# export BOLD
# export RESET
# export CYAN


# function parse_git_dirty() {
#   [[ $(git status 2> /dev/null | tail -n1) != *"working directory clean"* ]] && echo " * "
# }

# function parse_git_branch() {
#   git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$(parse_git_dirty)/"
# }

# Put the penultimate and current directory
# in the iterm tab
#\[\e]1;\]$(basename $(dirname $PWD))/\W\[\a\]


# export PS1="\[$CYAN\]\u \[$RESET\] @ \[$ORANGE\] \w \$([[ -n \$(git branch 2> /dev/null) ]] && echo \"\[$RESET\] on \")\[$PURPLE\]\$(parse_git_branch)\[${BOLD}$MAGENTA\]\n=> \[$RESET\]"


#PS1="\[\e]2;$PWD\[\a\]\[\e]1;\]/\W\[\a\]\[${CYAN}\]\u \[$RESET\]at \[$ORANGE\]\w\[$GREEN\]\$([[ -n \$(git branch 2> /dev/null) ]] && echo \" on \")\[$PURPLE\]\$(parse_git_branch)\[${BOLD}$MAGENTA\]\n=> \[$RESET\]"
#PS1="\[\e]2;$PWD\[\a\]\[\e]1;\]/\W\[\a\]\[${CYAN}\]\u \[$RESET\]at \[$ORANGE\]\w\[$GREEN\]\$([[ -n \$(git branch 2> /dev/null) ]] && echo \" on \")\[$PURPLE\]\$(parse_git_branch)\[${BOLD}$MAGENTA\]\n→ \[$RESET\]"
#  Customize BASH PS1 prompt to show current GIT repository and branch.
#  by Mike Stewart - http://MediaDoneRight.com

#  SETUP CONSTANTS
#  Bunch-o-predefined colors.  Makes reading code easier than escape sequences.
#  I don't remember where I found this.  o_O

Color_Off="\[\033[0m\]"       # Text Reset

# High Intensty Colors
IBlack="\[\033[0;90m\]"       # Black
IRed="\[\033[0;91m\]"         # Red
IGreen="\[\033[0;92m\]"       # Green
IYellow="\[\033[0;93m\]"      # Yellow
IBlue="\[\033[0;94m\]"        # Blue
IPurple="\[\033[0;95m\]"      # Purple
ICyan="\[\033[0;96m\]"        # Cyan
IWhite="\[\033[0;97m\]"       # White

# Various variables you might want for your PS1 prompt instead
Time12h="\T"
Time12a="\@"
PathFull="\[$IYellow\]\w"
PathShort="\W"
# UserName="\u"
UserName="\[$IGreen\][ colwob \[$ICyan\]o_O\[$IGreen\] ]"
NewLine="\n"
Jobs="\j"

function parse_git_dirty {
  [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit (working directory clean)" ]] && echo ""
}

function parse_git_branch {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/{ \1$(parse_git_dirty) } - /"
}

function get_sha() {
 git rev-parse --short  HEAD 2>/dev/null
}

function git_branch_icon {
    git rev-parse --git-dir > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        git_status="$(git status 2> /dev/null)"
        branch_pattern="^# On branch ([^${IFS}]*)"
        detached_branch_pattern="# Not currently on any branch"
        remote_pattern="# Your branch is (.*) of"
        diverge_pattern="# Your branch and (.*) have diverged"
        untracked_pattern="# Untracked files:"
        new_pattern="new file:"
        not_staged_pattern="Changes not staged for commit"

        #files not staged for commit
        if [[ ${git_status}} =~ ${not_staged_pattern} ]]; then
            state="✔"
        fi
        # add an else if or two here if you want to get more specific
        # show if we're ahead or behind HEAD
        if [[ ${git_status} =~ ${remote_pattern} ]]; then
            if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
                remote="↑"
            else
                remote="↓"
            fi
        fi
        #new files
        if [[ ${git_status} =~ ${new_pattern} ]]; then
            remote="+"
        fi
        #untracked files
        if [[ ${git_status} =~ ${untracked_pattern} ]]; then
            remote="✖"
        fi
        #diverged branch
        if [[ ${git_status} =~ ${diverge_pattern} ]]; then
            remote="↕"
        fi
        #branch name
        if [[ ${git_status} =~ ${branch_pattern} ]]; then
            branch=${BASH_REMATCH[1]}
        #detached branch
        elif [[ ${git_status} =~ ${detached_branch_pattern} ]]; then
            branch="NO BRANCH"
        fi

        echo " - ( ${branch}${state}${remote} )"
    fi
    return
}

working_directory() {
  dir=`pwd`
  in_home=0
  if [[ `pwd` =~ ^"$HOME"(/|$) ]]; then
    dir="~${dir#$HOME}"
    in_home=1
  fi

  workingdir=""
  if [[ `tput cols` -lt 110 ]]; then
    first="/`echo $dir | cut -d / -f 2`"
    letter=${first:0:2}
    if [[ $in_home == 1 ]]; then
      letter="~$letter"
    fi
    proj=`echo $dir | cut -d / -f 3`
    beginning="$letter/$proj"
    end=`echo "$dir" | rev | cut -d / -f1 | rev`

    if [[ $proj == "" ]]; then
      workingdir="$dir"
    elif [[ $proj == "~" ]]; then
      workingdir="$dir"
    elif [[ $dir =~ "$first/$proj"$ ]]; then
      workingdir="$beginning"
    elif [[ $dir =~ "$first/$proj/$end"$ ]]; then
      workingdir="$beginning/$end"
    else
      workingdir="$beginning/…/$end"
    fi
  else
    workingdir="$dir"
  fi

  echo -e "${IYellow}$workingdir${Color_Off}"
}

prompt() {
  if [[ $? -eq 0 ]]; then
    exit_status="${ICyan}\n=>${Color_Off} "
  else
    exit_status="${IRed}\n=>${Color_Off} "
  fi

    export PS1="${IBlack}${Time12h} :: ${UserName} $(working_directory)${Color_Off}\$([[ -n \$(git branch 2> /dev/null) ]] && echo \"${Color_Off} on \")${IGreen}\$(parse_git_branch)${Color_Off}${IBlue}$(get_sha)${Color_Off}$(git_branch_icon)$exit_status"
}

PROMPT_COMMAND=prompt
