######################################################################
#
# Author: Colúm Bennett
# Email: col1985@gmail.com / cbennett@redhat.com
# Twitter: @ColumBennett
# GitHub: @col1985
# IRC: cbennett
#
# .bash_prompt file
# preferred bash_prompt config with git status prompt, used during daily workflow.
######################################################################

# Reset
Color_Off="\[\033[0m\]"       # Text Reset

# High Intensty Colors
IBlack="\[\033[0;90m\]"       # Black
IRed="\[\033[0;91m\]"         # Red
IGreen="\[\033[0;92m\]"       # Green
IYellow="\[\033[0;93m\]"      # Yellow
IBlue="\[\033[0;94m\]"        # Blue
IPurple="\[\033[0;95m\]"      # Purple
ICyan="\[\033[0;96m\]"        # Cyan
IWhite="\[\033[0;97m\]"       # White

# Various variables you might want for your PS1 prompt instead
Time12h="\T"
Time12a="\@"
PathFull="\[$IYellow\]\w"
PathShort="\W"
UserName="\[$IGreen\][ colwob \[$ICyan\]o_O\[$IGreen\] ]"
NewLine="\n"
Jobs="\j"

# Put the penultimate and current directory in the iterm tab
currentDirectory="\[\e]1;\]$(basename $(dirname $PWD))/$PathShort\[\a\]"

function parse_git_dirty {
  [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit (working directory clean)" ]] && echo " * "
}

function parse_git_branch {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/{ \1$(parse_git_dirty) } - /"
}

function get_sha() {
 git rev-parse --short  HEAD 2>/dev/null
}

function git_branch_icon {
    git rev-parse --git-dir > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        git_status="$(git status 2> /dev/null)"
        branch_pattern="^# On branch ([^${IFS}]*)"
        detached_branch_pattern="# Not currently on any branch"
        remote_pattern="# Your branch is (.*) of"
        diverge_pattern="# Your branch and (.*) have diverged"
        untracked_pattern="# Untracked files:"
        new_pattern="new file:"
        not_staged_pattern="Changes not staged for commit"

        #files not staged for commit
        if [[ ${git_status}} =~ ${not_staged_pattern} ]]; then
            state="✔"
        fi
        # add an else if or two here if you want to get more specific
        # show if we're ahead or behind HEAD
        if [[ ${git_status} =~ ${remote_pattern} ]]; then
            if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
                remote=" ↑ "
            else
                remote=" ↓ "
            fi
        fi
        #new files
        if [[ ${git_status} =~ ${new_pattern} ]]; then
            remote=" + "
        fi
        #untracked files
        if [[ ${git_status} =~ ${untracked_pattern} ]]; then
            remote=" ✖ "
        fi
        #diverged branch
        if [[ ${git_status} =~ ${diverge_pattern} ]]; then
            remote=" ↕ "
        fi
        #branch name
        if [[ ${git_status} =~ ${branch_pattern} ]]; then
            branch=${BASH_REMATCH[1]}
        #detached branch
        elif [[ ${git_status} =~ ${detached_branch_pattern} ]]; then
            branch="No Branch"
        fi

        echo " - ( ${branch}${state}${remote} )"
    fi
    return
}

working_directory() {
  dir=`pwd`
  in_home=0
  if [[ `pwd` =~ ^"$HOME"(/|$) ]]; then
    dir="~${dir#$HOME}"
    in_home=1
  fi

  workingdir=""
  if [[ `tput cols` -lt 110 ]]; then
    first="/`echo $dir | cut -d / -f 2`"
    letter=${first:0:2}
    if [[ $in_home == 1 ]]; then
      letter="~$letter"
    fi
    proj=`echo $dir | cut -d / -f 3`
    beginning="$letter/$proj"
    end=`echo "$dir" | rev | cut -d / -f1 | rev`

    if [[ $proj == "" ]]; then
      workingdir="$dir"
    elif [[ $proj == "~" ]]; then
      workingdir="$dir"
    elif [[ $dir =~ "$first/$proj"$ ]]; then
      workingdir="$beginning"
    elif [[ $dir =~ "$first/$proj/$end"$ ]]; then
      workingdir="$beginning/$end"
    else
      workingdir="$beginning/…/$end"
    fi
  else
    workingdir="$dir"
  fi

  echo -e "${IYellow}$workingdir${Color_Off}"
}

prompt() {
  if [[ $? -eq 0 ]]; then
    exit_status="${ICyan}\n=>${Color_Off} "
  else
    exit_status="${IRed}\n=>${Color_Off} "
  fi

    export PS1="${currentDirectory}${IBlack}${Time12h} :: ${UserName} $(working_directory)${Color_Off}\$([[ -n \$(git branch 2> /dev/null) ]] && echo \"${Color_Off} on \")${IGreen}\$(parse_git_branch)${Color_Off}${IBlue}$(get_sha)${Color_Off}$(git_branch_icon)$exit_status"
}

PROMPT_COMMAND=prompt